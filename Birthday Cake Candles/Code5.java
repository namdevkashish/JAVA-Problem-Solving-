import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'birthdayCakeCandles' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY candles as parameter.
     */

    public static int birthdayCakeCandles(List<Integer> candles) {
    // Write your code here
        int max = Collections.max(candles);
        return Collections.frequency(candles, max);
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int candlesCount = Integer.parseInt(bufferedReader.readLine().trim());

        String[] candlesTemp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> candles = new ArrayList<>();

        for (int i = 0; i < candlesCount; i++) {
            int candlesItem = Integer.parseInt(candlesTemp[i]);
            candles.add(candlesItem);
        }

        int result = Result.birthdayCakeCandles(candles);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

/*
#TEST CASE 1:
Compiler Message
Success

Input (stdin):
10
82 49 82 82 41 82 15 63 38 25

Expected Output:
4

#TEST CASE 2:
Compiler Message
Success

Input (stdin):
100000
9547948 8558390 9999933 5148263 5764559 906438 9296778 1156268 6642930 362317 5884372 8183642 1893625 2078221 9091567 9008204 5596899 2415143 3745745 9999933 4601052 2226334 9999933 9084710 6425739 859550 7297169 2560362 7342790 6125814 973515 7983457 1411690 9999933 7698786 173508 9999933 7146414 5063134 6934007 506731 9672243 1791721 3542431 9645190 4101220 120716 4815228 7129154 1377763 2420858 9999933 2913976 4704061 8792535 8232675 6865047 4119291 7633812 6646342 1714025 653612 1541039 2074983 7203496 908154 2567724 6466771 9999933 8767549 923596 7545333 8336840 7677082 9224613 15813 1946806 7379477 9617658 1431652 1646399 4316536 9054082 9999933 7442742 6195231 5658010 5196448 9299025 328790 4842946 7735895 6408468 3643022 125830 1311355 6873837 3429811 8806735 7931003 857916 4340781 8759926 775115 2913265 5116295 2634520 7840844 9999933 5278505 6228386 2951110 5581449 3722306 220082 1641686 8022680 7872730 3630783 9396252 6623901 8139011 2244905 6596692 7298994 2023640 8866528 7080770 2287635 74{-truncated-}

Expected Output:
7174

#TEST CASE 3:
Compiler Message
Success

Input (stdin):
100000
{-truncated-}

Expected Output:
100000

*/
